import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:shared_preferences/shared_preferences.dart';

class AuthProvider with ChangeNotifier {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  String _token = "";
  String? _email;
  String _fullName = ""; 
  String _phoneNumber = ""; 
  String _address = ""; 

  bool get isAuthenticated => _token.isNotEmpty;
  String? get email => _email;
  String get fullName => _fullName;
  String get phoneNumber => _phoneNumber;
  String get address => _address;

  /// Ki·ªÉm tra xem c√≥ th√¥ng tin ƒë·∫ßy ƒë·ªß kh√¥ng
  bool get hasUserInfo {
    return _fullName.isNotEmpty && _phoneNumber.isNotEmpty && _address.isNotEmpty;
  }

  /// L∆∞u token v√†o SharedPreferences
  Future<void> _saveToken(String token) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('auth_token', token);
  }

  /// T·∫£i token v√† th√¥ng tin ng∆∞·ªùi d√πng t·ª´ SharedPreferences
  Future<void> _loadToken() async {
    final prefs = await SharedPreferences.getInstance();
    _token = prefs.getString('auth_token') ?? "";
    _email = prefs.getString('email');
    _fullName = prefs.getString('full_name') ?? "";
    _phoneNumber = prefs.getString('phone_number') ?? "";
    _address = prefs.getString('address') ?? "";
    notifyListeners();
  }

  /// H√†m c√¥ng khai ƒë·ªÉ load d·ªØ li·ªáu khi app kh·ªüi ƒë·ªông
  Future<void> loadToken() async {
    await _loadToken();
  }

  /// ƒêƒÉng xu·∫•t (Ch·ªâ x√≥a token, gi·ªØ l·∫°i th√¥ng tin ng∆∞·ªùi d√πng)
  Future<void> logout() async {
    _token = "";
    await _auth.signOut();
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('auth_token'); // Ch·ªâ x√≥a token, kh√¥ng x√≥a th√¥ng tin user
    notifyListeners();
  }

  /// C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng v√†o Firestore v√† SharedPreferences
  Future<void> updateUserInfo({
    required String email,
    required String fullName,
    required String phoneNumber,
    required String address,
  }) async {
    final User? user = _auth.currentUser;
    if (user == null) return;

    _email = email;
    _fullName = fullName;
    _phoneNumber = phoneNumber;
    _address = address;

    // ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin theo email (SetOptions(merge: true) ƒë·ªÉ tr√°nh m·∫•t d·ªØ li·ªáu c≈©)
    await _firestore.collection('users').doc(email).set({
      'email': email,
      'fullName': fullName,
      'phoneNumber': phoneNumber,
      'address': address,
    }, SetOptions(merge: true));

    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('email', email);
    await prefs.setString('full_name', fullName);
    await prefs.setString('phone_number', phoneNumber);
    await prefs.setString('address', address);

    notifyListeners();
  }

  /// ƒêƒÉng k√Ω t√†i kho·∫£n
  Future<String> register(String email, String password, BuildContext context) async {
    try {
      UserCredential userCredential = await _auth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );

      String token = (await userCredential.user?.getIdToken()) ?? "";
      _token = token;

      // üåü C·∫≠p nh·∫≠t l·∫°i c√°ch l∆∞u d·ªØ li·ªáu v√†o Firestore
      await _firestore.collection('users').doc(userCredential.user!.email).set({
        'email': email,
        'fullName': '',
        'phoneNumber': '',
        'address': '',
      });

      await _saveToken(token);
      notifyListeners();

      Navigator.pushReplacementNamed(context, '/login');
      return "ƒêƒÉng k√Ω th√†nh c√¥ng!";
    } catch (e) {
      return "L·ªói: ${e.toString()}";
    }
  }

  /// ƒêƒÉng nh·∫≠p, ∆∞u ti√™n l·∫•y d·ªØ li·ªáu t·ª´ SharedPreferences tr∆∞·ªõc
  Future<String> login(String email, String password, BuildContext context) async {
    try {
      UserCredential userCredential = await _auth.signInWithEmailAndPassword(
        email: email.trim(),
        password: password,
      );

      String? token = await userCredential.user?.getIdToken();
      if (token == null || token.isEmpty) {
        return "L·ªói x√°c th·ª±c, vui l√≤ng th·ª≠ l·∫°i!";
      }

      _token = token;
      _email = email;

      final prefs = await SharedPreferences.getInstance();
      
      // Ki·ªÉm tra n·∫øu d·ªØ li·ªáu c√≥ trong SharedPreferences
      if (prefs.containsKey('full_name')) {
        _fullName = prefs.getString('full_name') ?? "";
        _phoneNumber = prefs.getString('phone_number') ?? "";
        _address = prefs.getString('address') ?? "";
      } else {
        // N·∫øu ch∆∞a c√≥, l·∫•y t·ª´ Firestore
        DocumentSnapshot userDoc = await _firestore.collection('users').doc(userCredential.user!.email).get();
        if (!userDoc.exists) {
          return "Sai email ho·∫∑c m·∫≠t kh·∫©u!";
        }

        Map<String, dynamic>? userData = userDoc.data() as Map<String, dynamic>?;
        _fullName = userData?['fullName'] ?? "";
        _phoneNumber = userData?['phoneNumber'] ?? "";
        _address = userData?['address'] ?? "";

        // L∆∞u v√†o SharedPreferences
        await prefs.setString('full_name', _fullName);
        await prefs.setString('phone_number', _phoneNumber);
        await prefs.setString('address', _address);
      }
      
      await _saveToken(token);
      notifyListeners();

      Navigator.pushReplacementNamed(context, '/user_info');
      return "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!";
    } catch (e) {
      return "Sai email ho·∫∑c m·∫≠t kh·∫©u!";
    }
  }
}
